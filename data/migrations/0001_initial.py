# Generated by Django 3.0 on 2021-06-17 13:29

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Aethalometer_Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Data_DateTime', models.DateTimeField(verbose_name='date published')),
                ('Data_Serial_Number', models.CharField(max_length=20)),
                ('Data_BC1', models.FloatField()),
                ('Data_BC2', models.FloatField()),
                ('Data_BC3', models.FloatField()),
                ('Data_BC4', models.FloatField()),
                ('Data_BC5', models.FloatField()),
                ('Data_BC6', models.FloatField()),
                ('Data_BC7', models.FloatField()),
                ('Data_FlowC', models.FloatField()),
                ('Instrument_Supply_Voltage', models.FloatField()),
                ('Instrument_Supply_Current', models.FloatField()),
                ('Instrument_Temp', models.FloatField()),
                ('Instrument_Pressure', models.FloatField()),
                ('Instrument_Humidity', models.FloatField()),
                ('Instrument_Status', models.IntegerField()),
            ],
            options={
                'ordering': ['Data_DateTime'],
            },
        ),
        migrations.CreateModel(
            name='Aethalometer_Logs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Log_DateTime', models.DateTimeField(verbose_name='date published')),
                ('Log_Type', models.IntegerField()),
                ('Log_Details', models.CharField(max_length=200)),
            ],
            options={
                'ordering': ['Log_DateTime'],
            },
        ),
        migrations.CreateModel(
            name='Baloon_Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Data_DateTime', models.DateTimeField(verbose_name='date published')),
                ('Data_Height', models.FloatField()),
            ],
            options={
                'ordering': ['Data_DateTime'],
            },
        ),
        migrations.CreateModel(
            name='Baloon_Logs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Log_DateTime', models.DateTimeField(verbose_name='date published')),
                ('Log_Type', models.IntegerField()),
                ('Log_Details', models.CharField(max_length=200)),
            ],
            options={
                'ordering': ['Log_DateTime'],
            },
        ),
        migrations.CreateModel(
            name='Kraken_Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Data_DateTime', models.DateTimeField(verbose_name='date published')),
                ('Market', models.CharField(max_length=20)),
                ('Open', models.FloatField()),
                ('Close', models.FloatField()),
                ('High', models.FloatField()),
                ('Low', models.FloatField()),
                ('Volume', models.FloatField()),
            ],
            options={
                'ordering': ['Data_DateTime'],
            },
        ),
        migrations.CreateModel(
            name='Picarro_Alarms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Alarms_DateTime', models.DateTimeField(verbose_name='date published')),
                ('Alarms_Type', models.IntegerField()),
                ('Alarms_Details', models.CharField(max_length=200)),
                ('Alarms_Acknowledged', models.BooleanField()),
            ],
            options={
                'ordering': ['Alarms_DateTime'],
            },
        ),
        migrations.CreateModel(
            name='Picarro_Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Data_DateTime', models.DateTimeField(verbose_name='date published')),
                ('Data_CO2', models.FloatField()),
                ('Data_CO2_Dry', models.FloatField()),
                ('Data_CO', models.FloatField()),
                ('Data_CH4', models.FloatField()),
                ('Data_CH4_Dry', models.FloatField()),
                ('Data_H2O', models.FloatField()),
                ('Data_Amb_P', models.FloatField()),
                ('Data_CavityPressure', models.FloatField()),
                ('Data_Cavity_Temp', models.FloatField()),
                ('Data_DasTemp', models.FloatField()),
                ('Data_EtalonTemp', models.FloatField()),
                ('Data_WarmBoxTemp', models.FloatField()),
                ('Data_Species', models.FloatField()),
                ('Data_MPVPosition', models.FloatField()),
                ('Data_OutletValve', models.FloatField()),
                ('Data_Solenoid_Valves', models.FloatField()),
                ('Data_h2o_reported', models.FloatField()),
                ('Data_b_h2o_pct', models.FloatField()),
                ('Data_peak_14', models.FloatField()),
                ('Data_peak84_raw', models.FloatField()),
                ('Instrument_Supply_Voltage', models.FloatField()),
                ('Instrument_Supply_Current', models.FloatField()),
                ('Instrument_Temp', models.FloatField()),
                ('Instrument_Pressure', models.FloatField()),
                ('Instrument_Humidity', models.FloatField()),
                ('Instrument_Status', models.IntegerField()),
            ],
            options={
                'ordering': ['Data_DateTime'],
            },
        ),
        migrations.CreateModel(
            name='Picarro_Logs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Log_DateTime', models.DateTimeField(verbose_name='date published')),
                ('Log_Type', models.IntegerField()),
                ('Log_Details', models.CharField(max_length=200)),
            ],
            options={
                'ordering': ['Log_DateTime'],
            },
        ),
        migrations.CreateModel(
            name='Picarro_PM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PM_DateCreated', models.DateTimeField(verbose_name='date published')),
                ('PM_Title', models.CharField(max_length=100)),
                ('PM_Type', models.IntegerField()),
                ('PM_Time_Interval', models.IntegerField()),
                ('PM_Details', models.CharField(blank=True, max_length=200, null=True)),
                ('PM_Task', models.CharField(blank=True, max_length=100, null=True)),
                ('PM_Kwargs', models.CharField(blank=True, max_length=200, null=True)),
                ('PM_Args', models.CharField(blank=True, max_length=200, null=True)),
                ('PM_Enabled', models.IntegerField(verbose_name=0)),
                ('PM_Last_Run_At', models.DateTimeField(blank=True, null=True)),
                ('PM_Total_Run_Count', models.IntegerField(verbose_name=0)),
                ('PM_Date_Changed', models.DateTimeField(blank=True, null=True)),
                ('PM_One_Off', models.IntegerField(verbose_name=0)),
            ],
            options={
                'ordering': ['PM_DateCreated'],
            },
        ),
        migrations.CreateModel(
            name='Picarro_Properties',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Properties_DateCreated', models.DateTimeField(verbose_name='date published')),
                ('Properties_Type', models.IntegerField()),
                ('Properties_Title', models.CharField(max_length=100)),
                ('Properties_Value', models.IntegerField()),
                ('Properties_Kwargs', models.CharField(blank=True, max_length=200, null=True)),
                ('Properties_Args', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'ordering': ['Properties_DateCreated'],
            },
        ),
        migrations.CreateModel(
            name='Picarro_Property_Types',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Properties_Type_Name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Tucson_Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Data_DateTime', models.DateTimeField(verbose_name='date published')),
                ('Data_MaxGust', models.FloatField()),
                ('Data_MaxGustDir', models.FloatField()),
                ('Data_MaxGustTime', models.FloatField()),
                ('Data_WindDir', models.FloatField()),
                ('Data_WindDirFlag', models.FloatField()),
                ('Data_WindSpeed', models.FloatField()),
                ('Data_WindSpeedFlag', models.FloatField()),
                ('Data_WindSpeed_Min', models.FloatField()),
                ('Data_WindSpeed_StdDev', models.FloatField()),
                ('Data_DryA', models.FloatField()),
                ('Data_GrassA', models.FloatField()),
                ('Data_5cmA', models.FloatField()),
                ('Data_10cmA', models.FloatField()),
                ('Data_20cmA', models.FloatField()),
                ('Data_30cmA', models.FloatField()),
                ('Data_50cmA', models.FloatField()),
                ('Data_100cmA', models.FloatField()),
                ('Data_HumA', models.FloatField()),
                ('Data_SolarRadA', models.FloatField()),
                ('Data_Characteristic', models.FloatField()),
                ('Data_Pressure', models.FloatField()),
                ('Data_Tendency', models.FloatField()),
                ('Data_VisAlarm', models.FloatField()),
                ('Data_HardwareError', models.FloatField()),
                ('Data_OneMinVis', models.FloatField()),
                ('Data_TenMinVis', models.FloatField()),
                ('Data_PWCode_Int', models.FloatField()),
                ('Data_PWCode15', models.FloatField()),
                ('Data_PWCodeHour', models.FloatField()),
                ('Data_Intensity', models.FloatField()),
                ('Data_Water', models.FloatField()),
                ('Data_Snow', models.FloatField()),
                ('Data_DayOfYear', models.FloatField()),
                ('Data_CMP11_MinGlobal', models.FloatField()),
                ('Data_CSD3_MinSunshine', models.FloatField()),
                ('Data_SPN1_MinSunshine', models.FloatField()),
                ('Data_SPN1_MinGlobal', models.FloatField()),
                ('Data_SPN1_MinDiffuse', models.FloatField()),
            ],
            options={
                'ordering': ['Data_DateTime'],
            },
        ),
        migrations.CreateModel(
            name='Tucson_Logs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Log_DateTime', models.DateTimeField(verbose_name='date published')),
                ('Log_Type', models.IntegerField()),
                ('Log_Details', models.CharField(max_length=200)),
            ],
            options={
                'ordering': ['Log_DateTime'],
            },
        ),
        migrations.CreateModel(
            name='Weather_Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Data_DateTime', models.DateTimeField(verbose_name='date published')),
                ('Data_MaxGust', models.FloatField()),
                ('Data_MaxGustDir', models.FloatField()),
                ('Data_MaxGustTime', models.FloatField()),
                ('Data_WindDir', models.FloatField()),
                ('Data_WindDirFlag', models.FloatField()),
                ('Data_WindSpeed', models.FloatField()),
                ('Data_WindSpeedFlag', models.FloatField()),
                ('Data_WindSpeed_Min', models.FloatField()),
                ('Data_WindSpeed_StdDev', models.FloatField()),
                ('Data_Characteristic', models.FloatField()),
                ('Data_Pressure', models.FloatField()),
                ('Data_PressureFlag', models.FloatField()),
                ('Data_Tendency', models.FloatField()),
                ('Data_DryA', models.FloatField()),
                ('Data_DryA_Flag', models.FloatField()),
                ('Data_GrassA', models.FloatField()),
                ('Data_GrassA_Flag', models.FloatField()),
                ('Data_HumA', models.FloatField()),
                ('Data_HumA_Flag', models.FloatField()),
                ('Instrument_Supply_Voltage', models.FloatField()),
                ('Instrument_Supply_Current', models.FloatField()),
                ('Instrument_Temp', models.FloatField()),
                ('Instrument_Pressure', models.FloatField()),
                ('Instrument_Humidity', models.FloatField()),
                ('Instrument_Status', models.IntegerField()),
            ],
            options={
                'ordering': ['Data_DateTime'],
            },
        ),
        migrations.CreateModel(
            name='Weather_Logs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Log_DateTime', models.DateTimeField(verbose_name='date published')),
                ('Log_Type', models.IntegerField()),
                ('Log_Details', models.CharField(max_length=200)),
            ],
            options={
                'ordering': ['Log_DateTime'],
            },
        ),
        migrations.CreateModel(
            name='Picarro_Jobs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Jobs_DateCreated', models.DateTimeField(verbose_name='date published')),
                ('Jobs_DateToBeCompleted', models.DateTimeField(blank=True, null=True)),
                ('Jobs_DateCompleted', models.DateTimeField(blank=True, null=True)),
                ('Jobs_Title', models.CharField(max_length=100)),
                ('Jobs_Description', models.CharField(blank=True, max_length=400, null=True)),
                ('Jobs_Notes', models.CharField(blank=True, max_length=200, null=True)),
                ('Jobs_Type', models.IntegerField()),
                ('Jobs_Status', models.IntegerField()),
                ('PM', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data.Picarro_PM')),
            ],
            options={
                'ordering': ['Jobs_DateCreated'],
            },
        ),
    ]

python -m venv .env

.env\scripts\activate

Run Terminal: Create New Integrated Terminal (Ctrl+Shift+`)

python -m pip install --upgrade pip

python -m pip install django==2.1.15

django-admin startproject core .

# Modify Database in Settings:
DATABASES = {
    'default': {
        'ENGINE': 'sql_server.pyodbc',
        'NAME': 'meteireann',
        'USER': 'PythonWebApp',
        'PASSWORD': 'a987REALLY#$%TRONGpa44w0rd',
        'HOST': 'enviroscan.database.windows.net',
        'PORT': '',
        'OPTIONS': {
            'driver': 'ODBC Driver 17 for SQL Server',
        },
    }
} 

python manage.py createsuperuser

Python manage.py collectstatic

python -m pip install --upgrade pip

sudo apt-get install unixodbc unixodbc-dev

pip3 install -r requirements.txt 

python manage.py makemigrations

python manage.py migrate

python manage.py runserver

python manage.py beatserver

celery -A core control shutdown
celery -A core purge
celery -A core worker -l info -P gevent

celery -A core beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler

celery -A core worker --beat --scheduler django --loglevel=info

python manage.py runworker background-tasks

python manage.py startapp data

az login
az webapp up --sku B1 --name <app-name>
az webapp up
az webapp log tail




# WORKER
celery -A core purge #### CLEAN
celery -A core worker -l info -P gevent

# SCHEDULER
celery -A core beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler

# SERVER RUN
python manage.py runserver



cd enviroscan
git reset --hard
git pull enviroscan main
sudo reboot






#####################################################################
USEFULL COMMANDS:
tail -f /var/log/apache2/error.log  # View Apache Logs
tail -f /var/log/nginx/error.log  # View NGINX Logs
sudo apt list                       # List all available apps
sudo apt list | grep nginx          # List all available apps sorted by nginx
sudo apt list --installed           # List all installed apps
sudo apt list apache2               # List all apps associated with apache2
sudo apt list --upgradeable         # List of all upgradeable packages
dpkg --list                         # List all installed packages
#####################################################################
REFFERENCES:
https://github.com/mitchtabian/HOWTO-django-channels-daphne
https://azureossd.github.io/2022/04/16/SSL-TLS-certificates-for-Apache-and-NGINX-on-Azure-VMs/index.html
https://techtutorguro.com/how-to-install-django-3-2-lts-on-ubuntu-20-04/
https://realpython.com/django-nginx-gunicorn/
https://cloudinfrastructureservices.co.uk/how-to-setup-django-server-on-azure-aws-gcp/
https://azuremarketplace.microsoft.com/en-us/marketplace/apps/cloud-infrastructure-services.django-ubuntu
https://saurabhgujjar.medium.com/django-channels-with-daphne-gunicorn-and-nginx-on-digitalocean-all-in-one-guide-28625eead962
#####################################################################
CREATE VM
#####################################################################
# 1. Updating the system
sudo apt update -y && apt upgrade -y
#####################################################################
# 2. Installing pip and Virtual Environment
sudo apt install python3-pip python3-venv
#####################################################################
# 3. Clone Project Directory from Github
git clone https://github.com/willbullen/ENVIROSCAN_WEBAPP.git
#####################################################################
# 4. Create Virtual Environment
cd ENVIROSCAN_WEBAPP
python3 -m venv enviroscan_venv
#####################################################################
# 5. Activate the virtual environment.
source ENVIROSCAN_WEBAPP/enviroscan_venv/bin/activate
#####################################################################
# 6. Upgrade pip
python3 -m pip install --upgrade pip
#####################################################################
# 7. Install SQL Drivers
if ! [[ "16.04 18.04 20.04 21.04 21.10" == *"$(lsb_release -rs)"* ]];
then
    echo "Ubuntu $(lsb_release -rs) is not currently supported.";
    exit;
fi
sudo su
curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -
curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list > /etc/apt/sources.list.d/mssql-release.list
exit
sudo apt-get update
sudo ACCEPT_EULA=Y apt-get install -y msodbcsql17
# optional: for bcp and sqlcmd
sudo ACCEPT_EULA=Y apt-get install -y mssql-tools
echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
source ~/.bashrc
# optional: for unixODBC development headers
sudo apt-get install -y unixodbc unixodbc-dev
#####################################################################
# 8. Install from requirements.txt
pip3 install -r requirements.txt
#####################################################################
# 9. Run and Test http://IPaddress:8000
python3 manage.py runserver 0.0.0.0:8000
#####################################################################
# 10. Setting up the production with Apache and WSGI
deactivate # deactivate virtual connection
sudo apt-get install apache2 libapache2-mod-wsgi-py3
#####################################################################
# 11. Create a virtual host
sudo nano /etc/apache2/sites-available/enviroscan.conf
# PASTE START
<VirtualHost *:80>

    ServerName enviroscan
    ServerAlias www.enviroscan.io
    DocumentRoot /home/willbullen/ENVIROSCAN_WEBAPP
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined

    Alias /static/ /home/willbullen/ENVIROSCAN_WEBAPP/core/static/
    <Directory /home/willbullen/ENVIROSCAN_WEBAPP/core/static>
        Require all granted
    </Directory>

    Alias /media/ /home/willbullen/ENVIROSCAN_WEBAPP/core/media/
    <Directory /home/willbullen/ENVIROSCAN_WEBAPP/core/media>
        Require all granted
    </Directory>

    <Directory /home/willbullen/ENVIROSCAN_WEBAPP/core>
        <Files wsgi.py>
            Require all granted
        </Files>
    </Directory>

    WSGIDaemonProcess mydjangoproject python-path=/home/willbullen/ENVIROSCAN_WEBAPP python-home=/home/willbullen/ENVIROSCAN_WEBAPP/enviroscan_venv
    WSGIProcessGroup mydjangoproject
    WSGIScriptAlias / /home/willbullen/ENVIROSCAN_WEBAPP/core/wsgi.py

</VirtualHost>
# PASTE END
#####################################################################
# 12. Activate virtual host
sudo a2ensite enviroscan.conf
#####################################################################
# 13. Restart the Apache webserver
sudo systemctl restart apache2
#####################################################################
# 14. Installing Certbot
sudo apt install certbot python3-certbot-apache
#####################################################################
# 15. Test Virtual Host Configuration
sudo apache2ctl configtest
#####################################################################
# 16. Obtaining an SSL Certificate
sudo certbot --apache
#####################################################################
# 17. Extracting the key (.key) and certificate (.pem) - *NIX terminals
openssl pkcs12 -in enviroscan-enviroscan3d99d0a5-a0aa-44aa-84ff-15371ac9ea30-20220617.pfx -nocerts -out enviroscan-enviroscan3d99d0a5-a0aa-44aa-84ff-15371ac9ea30-20220617.pem
openssl rsa -in enviroscan-enviroscan3d99d0a5-a0aa-44aa-84ff-15371ac9ea30-20220617.pem -out enviroscan-enviroscan3d99d0a5-a0aa-44aa-84ff-15371ac9ea30-20220617.key
openssl pkcs12 -in enviroscan-enviroscan3d99d0a5-a0aa-44aa-84ff-15371ac9ea30-20220617.pfx -clcerts -nokeys -out enviroscan-enviroscan3d99d0a5-a0aa-44aa-84ff-15371ac9ea30-20220617.pem
#####################################################################
# 18. Uploading the files to the Virtual Machine
scp enviroscan-enviroscan3d99d0a5-a0aa-44aa-84ff-15371ac9ea30-20220617.key enviroscan-enviroscan3d99d0a5-a0aa-44aa-84ff-15371ac9ea30-20220617.pem willbullen@20.229.97.149:~
#####################################################################
# 19. Enable SSL/TLS
cd /etc/apache2/sites-available
#####################################################################
# 20. 
Change the following lines:
/home/willbullen/enviroscan-enviroscan3d99d0a5-a0aa-44aa-84ff-15371ac9ea30-20220617.pem
/home/willbullen/enviroscan-enviroscan3d99d0a5-a0aa-44aa-84ff-15371ac9ea30-20220617.key
# PASTE START
<IfModule mod_ssl.c>
    <VirtualHost _default_:443>

        ServerAdmin info@enviroscanmedia.com
        ServerName enviroscan
        ServerAlias www.enviroscan.io

        DocumentRoot /home/willbullen/ENVIROSCAN_WEBAPP

        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined

        Alias /static/ /home/willbullen/ENVIROSCAN_WEBAPP/core/static/
        <Directory /home/willbullen/ENVIROSCAN_WEBAPP/core/static>
            Require all granted
        </Directory>

        Alias /media/ /home/willbullen/ENVIROSCAN_WEBAPP/core/media/
        <Directory /home/willbullen/ENVIROSCAN_WEBAPP/core/media>
            Require all granted
        </Directory>

        <Directory /home/willbullen/ENVIROSCAN_WEBAPP/core>
            <Files wsgi.py>
                Require all granted
            </Files>
        </Directory>

        WSGIDaemonProcess enviroscanproject python-path=/home/willbullen/ENVIROSCAN_WEBAPP python-home=/>                
        WSGIProcessGroup enviroscanproject                
        WSGIScriptAlias / /home/willbullen/ENVIROSCAN_WEBAPP/core/wsgi.py

        SSLEngine on
        SSLCertificateFile /home/willbullen/enviroscan-enviroscan3d99d0a5-a0aa-44aa-84ff-15371ac9ea30-20220617.pem                
        SSLCertificateKeyFile /home/willbullen/enviroscan-enviroscan3d99d0a5-a0aa-44aa-84ff-15371ac9ea30-20220617.key

        <FilesMatch "\.(cgi|shtml|phtml|php)$">
            SSLOptions +StdEnvVars
        </FilesMatch>
        <Directory /usr/lib/cgi-bin>
            SSLOptions +StdEnvVars
        </Directory>

    </VirtualHost>
</IfModule>
# PASTE END
#####################################################################
# 21. Activate the Virtual Host:
sudo a2ensite default-ssl.conf
#####################################################################
# 22. Enable the SSL module:
sudo a2enmod ssl
#####################################################################
# 23. Config test:
sudo apache2ctl configtest
#####################################################################
# 24. Restart the Apache webserver
sudo systemctl restart apache2
#####################################################################
# 25. Websockets

sudo a2enmod proxy
sudo a2enmod proxy_http
sudo a2enmod proxy_ajp
sudo a2enmod rewrite
sudo a2enmod deflate
sudo a2enmod headers
sudo a2enmod proxy_balancer
sudo a2enmod proxy_connect
sudo a2enmod proxy_html









#####################################################################
#                           GUNICORM
#####################################################################
# https://github.com/mitchtabian/HOWTO-django-channels-daphne#Deploying-Django-Channels-with-Daphne-&-Systemd
#####################################################################
# Install gunicorn in virual env:
pip install gunicorn
# Load the project’s WSGI module:
gunicorn --bind 0.0.0.0:8000 core.wsgi
# Deactivate virtual env:
deactivate
# Creating systemd Socket and Service Files for Gunicorn:
sudo nano /etc/systemd/system/gunicorn.socket
######################### PASTE START ###############################
[Unit]
Description=gunicorn socket

[Socket]
ListenStream=/run/gunicorn.sock

[Install]
WantedBy=sockets.target
#########################  PASTE END  ###############################
# Create and open a systemd service file for Gunicorn in nano text editor:
sudo nano /etc/systemd/system/gunicorn.service
######################### PASTE START ###############################
[Unit]
Description=gunicorn daemon
Requires=gunicorn.socket
After=network.target

[Service]
User=willbullen
Group=www-data
WorkingDirectory=/home/willbullen/ENVIROSCAN_WEBAPP
ExecStart=/home/willbullen/ENVIROSCAN_WEBAPP/enviroscan_venv/bin/gunicorn --access-logfile -  --workers 3 --bind unix:/run/gunicorn.sock core.wsgi:application

[Install]
WantedBy=multi-user.target
#########################  PASTE END  ###############################
# Start the Gunicorn socket
sudo systemctl start gunicorn.socket
# Enable it so that when a connection is made to that socket, systemd will automatically start the gunicorn.service to handle it:
sudo systemctl enable gunicorn.socket
# Checking for the Gunicorn Socket File:
sudo systemctl status gunicorn.socket
# Check for the existence of the gunicorn.sock file within the /run directory:
file /run/gunicorn.sock
# Testing Socket Activation:
sudo systemctl status gunicorn
# Test the socket activation mechanism:
curl --unix-socket /run/gunicorn.sock localhost
# This confirms that Gunicorn was started and able to serve your Django application:
sudo systemctl status gunicorn
# If error check the logs for additional details:
sudo journalctl -u gunicorn
# Reload the daemon to reread the service definition:
sudo systemctl daemon-reload
# Then restart the Gunicorn process:
sudo systemctl restart gunicorn
# Reboot
sudo reboot




#####################################################################
#                               NGINX
#####################################################################
# https://github.com/mitchtabian/HOWTO-django-channels-daphne#Deploying-Django-Channels-with-Daphne-&-Systemd
#####################################################################
# Install nginx in virual env:
sudo apt-get update
sudo apt-get install nginx
# Deactivate virtual env:
deactivate
# Creating systemd Socket and Service Files for NGINX:
sudo nano /etc/nginx/sites-available/enviroscan.conf
######################### PASTE START ###############################

server {

    listen 80;
    server_name enviroscan.io www.enviroscan.io;
    return 301 https://$server_name$request_uri;

}

server {
    server_name enviroscan.io www.enviroscan.io;
    listen 443 ssl;
    root /home/willbullen/ENVIROSCAN_WEBAPP;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    ssl_certificate /etc/letsencrypt/live/enviroscan.io/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/enviroscan.io/privkey.pem; # managed by Certbot

    #include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        alias /home/willbullen/ENVIROSCAN_WEBAPP/core/static/;
    }

    location /media/ {
        alias /home/willbullen/ENVIROSCAN_WEBAPP/core/media/;
    }

    location / {
        include proxy_params;
        proxy_pass http://unix:/run/gunicorn.sock;
        }

    location /ws/ {
        proxy_set_header Host               $http_host;
        proxy_set_header X-Real-IP          $remote_addr;
        proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host   $server_name;
        proxy_set_header X-Forwarded-Proto  $scheme;
        proxy_set_header X-Url-Scheme       $scheme;
        proxy_redirect off;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_pass http://127.0.0.1:8001;
    }
}

#########################  PASTE END  ###############################
# Enable the file by linking it to the sites-enabled directory:
sudo ln -s /etc/nginx/sites-available/enviroscan.conf /etc/nginx/sites-enabled
# Test your Nginx configuration for syntax errors:
sudo nginx -t
# If no errors are reported, go ahead and restart Nginx:
sudo systemctl restart nginx


#####################################################################
#                           HTTPS CERTBOT
#####################################################################
# https://github.com/mitchtabian/HOWTO-django-channels-daphne#Deploying-Django-Channels-with-Daphne-&-Systemd
#####################################################################
# Install certbot
sudo apt install certbot python3-certbot-nginx
sudo systemctl reload nginx
# Make sure nginx configuration is still good.
sudo nginx -t
# Obtain SSL certificate
sudo certbot --nginx -d <your-domain.whatever> -d www.<your-domain.whatever>
# Verifying Certbot Auto-Renewal
sudo systemctl status certbot.timer
# Test renewal process
sudo certbot renew --dry-run


#####################################################################
#                   HTTPS USING AZURE CERT
#####################################################################
# https://azureossd.github.io/2022/04/16/SSL-TLS-certificates-for-Apache-and-NGINX-on-Azure-VMs/index.html
#####################################################################


#####################################################################
#                           DAPHNE
#####################################################################
# https://github.com/mitchtabian/HOWTO-django-channels-daphne#Deploying-Django-Channels-with-Daphne-&-Systemd
#####################################################################
pip install daphne
sudo nano /etc/systemd/system/daphne.service
######################### PASTE START ###############################
[Unit]
Description=daphne service
After=network.target

[Service]
Type=simple
User=root
Group=www-data
WorkingDirectory=/home/willbullen/ENVIROSCAN_WEBAPP
ExecStart=/home/willbullen/ENVIROSCAN_WEBAPP/enviroscan_venv/bin/python /home/willbullen/ENVIROSCAN_WEBAPP/enviroscan_venv/bin/daphne -e ssl:8001:privateKey=/etc/letsencrypt/live/enviroscan.io/privkey.pem:certKey=/etc/letsencrypt/live/enviroscan.io/fullchain.pem core.asgi:application
Restart=on-failure

[Install]
WantedBy=multi-user.target
#########################  PASTE END  ###############################
sudo systemctl daemon-reload
sudo systemctl start daphne.service
sudo systemctl status daphne.service
sudo reboot


#####################################################################
#                           REDIS
#####################################################################
# https://github.com/mitchtabian/HOWTO-django-channels-daphne#Deploying-Django-Channels-with-Daphne-&-Systemd
#####################################################################
# Install redis:
sudo apt install redis-server
# Edit config
sudo nano /etc/redis/redis.conf
# change 'supervised no' to 'supervised systemd'
# Restart service.
sudo systemctl restart redis.service
# Check status
sudo systemctl status redis
# Install nettools 
sudo apt install net-tools
# Confirm Redis is running at 127.0.0.1. Port should be 6379 by default.
sudo netstat -lnp | grep redis
# Restart service
sudo systemctl restart redis.service


#####################################################################
#                        MOSQUITTO MQTT
#####################################################################
# https://www.howtoforge.com/how-to-install-and-secure-the-mosquitto-mqtt-messaging-broker-on-ubuntu-20-04/
# https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-the-mosquitto-mqtt-messaging-broker-on-ubuntu-18-04-quickstart
#####################################################################
# Install the Mosquitto server and the client.
sudo apt install mosquitto mosquitto-clients
# Check the status of the server.
sudo systemctl status mosquitto
# Run the following command to generate an encrypted password file at /etc/mosquitto/passwd for the username willbullen.
sudo mosquitto_passwd -c /etc/mosquitto/passwd willbullen
# Next, create a default.conf file under the /etc/mosquitto/conf.d directory and open it for editing.
sudo nano /etc/mosquitto/conf.d/default.conf
# PASTE START
allow_anonymous false
password_file /etc/mosquitto/passwd
# PASTE END
# Restart the Mosquitto server to implement the change.
sudo systemctl restart mosquitto
# Enable Mosquitto
sudo systemctl enable mosquitto
# Check the status of the server.
sudo systemctl status mosquitto
# Test Mosquitto Client
# Subscribe to home/lights/kitchen topic, run the following command.
mosquitto_sub -h localhost -u willbullen -P will1977 -t /home/sensors/temp/kitchen 
# Don't close the existing window. Open a new terminal window to publish a message to the home/lights/kitchen topic using the following command.
mosquitto_pub -h localhost -u willbullen -P will1977 -t /home/sensors/temp/kitchen -m "Kitchen Temperature: 26°C"
# SSL certificates
sudo nano /etc/mosquitto/conf.d/default.conf
# PAST START
allow_anonymous false
password_file /etc/mosquitto/passwd

listener 1883 localhost

listener 8883
certfile /etc/letsencrypt/live/enviroscan.io/cert.pem
cafile /etc/letsencrypt/live/enviroscan.io/chain.pem
keyfile /etc/letsencrypt/live/enviroscan.io/privkey.pem

listener 8083
protocol websockets
certfile /etc/letsencrypt/live/enviroscan.io/cert.pem
cafile /etc/letsencrypt/live/enviroscan.io/chain.pem
keyfile /etc/letsencrypt/live/enviroscan.io/privkey.pem
# PAST END
# Restart Mosquitto to pick up the configuration changes:
sudo systemctl restart mosquitto
# Check to make sure the service is running again:
sudo systemctl status mosquitto
# Mosquitto’s log file:
sudo tail /var/log/mosquitto/mosquitto.log
# Open ports 8083 and 8883
# Open the Certbot renewal configuration file for your domain name:
sudo nano /etc/letsencrypt/renewal/enviroscan.io.conf
# Add the following renew_hook option on the last line:
renew_hook = systemctl restart mosquitto
# Save and close the file, then run a Certbot dry run to make sure the syntax is ok:
sudo certbot renew --dry-run
# Testing Mosquitto
# To subscribe using the secured listener on port 8883, do the following:
mosquitto_sub -h enviroscan.io -t test -p 8883 --capath /etc/ssl/certs/ -u "willbullen" -P "will1977"
# And this is how you publish to the secured listener:
mosquitto_pub -h enviroscan.io -t test -m "hello world" -p 8883 --capath /etc/ssl/certs/ -u "willbullen" -P "will1977"
# To test the websocket functionality, http://www.hivemq.com/demos/websocket-client/:


#####################################################################
#                     DJANGO CHANNELS MQTT
#####################################################################
# https://pypi.org/project/chanmqttproxy/
# https://github.com/nilmonto/mqtt-django-bridge/tree/master/examples/sample_project
#####################################################################




#####################################################
################### SYSTEM CKECK ####################
#####################################################
sudo systemctl status gunicorn.socket
sudo systemctl status daphne.service
sudo journalctl -u gunicorn

sudo nginx -t

The following logs may be helpful:

sudo tail /var/log/mosquitto/mosquitto.log  # Mosquitto logs

sudo journalctl -u nginx -f         # Check the Nginx process logs:
tail -f /var/log/nginx/access.log   # Check the Nginx access logs: 
tail -f /var/log/nginx/error.log    # Check the Nginx error logs: 
sudo journalctl -u gunicorn         # Check the Gunicorn application logs: 
sudo journalctl -u gunicorn.socket  # Check the Gunicorn socket logs: 

sudo journalctl -f                        is where all the logs are consolidated to. That's usually where I check.
sudo tail -F /var/log/nginx/error.log   View the last entries in the error log
sudo journalctl -u nginx                Nginx process logs
sudo less /var/log/nginx/access.log     Nginx access logs
sudo less /var/log/nginx/error.log      Nginx error logs
sudo journalctl -u gunicorn             gunicorn application logs
sudo journalctl -u gunicorn.socket      check gunicorn socket logs

# If you update your Django application, you can restart the Gunicorn process to pick up the changes by running the following:
sudo systemctl restart gunicorn
# If you change Gunicorn socket or service files, reload the daemon and restart the process by running the following:
sudo systemctl daemon-reload
sudo systemctl restart gunicorn.socket gunicorn.service
# If you change the Nginx server block configuration, test the configuration and then Nginx by running the following:
sudo nginx -t && sudo systemctl restart nginx

ip addr show                            # Show ip
#####################################################


ssh willbullen@20.229.97.149
cd enviroscan
git reset --hard
git pull enviroscan main
sudo reboot



First try

sudo systemctl restart gunicorn
if that doesn't solve it:

sudo systemctl start gunicorn
sudo systemctl enable gunicorn
sudo systemctl status gunicorn (Check for faults)
sudo systemctl daemon-reload
sudo systemctl restart gunicorn








#####################################################################
USEFULL COMMANDS:
apt-get update                          # This command will update your package lists. Remember, this will not update software. Run Command #2 or #3 followed by this command. Note that apt-get require root permission. You should add sudo before apt-get.
apt-get upgrade                         # This command will download and update installed software. But it will not install or remove extra packages.
apt-get dist-upgrade                    # To upgrade all the packages on your system, and, if needed for a package upgrade, installing extra packages or removing packages
apt-get install <package-name>          # You may download and install new packages or software named <package-name> using above commands. E.g. run sudo apt-get install gimp in your terminal to install Gimp image manipulation software. Notice the sudo before apt-get.
apt-get -f install                      # Sometimes while installing a software it fails. This might happen due to failure in downloading software itself or dependency. To fix broken installation run the above command.
apt-get remove <package-name>           # If you don’t like a software you can get rid of that by simply running above command. Don’t forget to change <package-name> with real one. This will uninstall the software but not the dependent packages.
apt-get purge <package-name>            # To completely remove a software and it’s dependent packages run the apt-get purge command.
apt-get autoclean                       # This command will remove all Debian (.deb) files that are no longer installed. You may find this files in /var/cache/apt/archives
apt-get clean                           # This will empty whole cache files. A lot of space could be freed if you frequently install and uninstall softwares.
apt-get automove                        # It will remove old dependent files and footprints installed by previous applications.
dpkg –configure -a                      # configure installed package
sudo nano /etc/apt/sources.list         # display repository source list in nano editor
sudo apt-get download <package-name>    # download but not install package
Ctrl + c                                # It kills process with a signal SIGINT. Don’t confuse with Ctrl+C in Windows or Ctrl+Z. Ctrl+Z is used to suspend a process while In Windows Ctrl+C is copy command.
Ctrl + Shift + c                        # This is a copy command.
Ctrl + Shift + v                        # This is paste command like Ctrl+v in Windows.
nano <filename>                         # nano is command line text editor. In terminal by running the above command you could edit file named <filename>.
sudo nano <filename>                    # This is same command as we mentioned earlier except it will edit file with privilege of super user.
gedit <filename>                        # gedit is GUI text editor like notepad in Windows. It will start editing file named <filename> in gedit window.
sudo gedit <filename>                   # This is again same as above except it will edit files with SU privilege. It is worth to mention this command because many beginners starts editing a file and later they realize they forget to get proper privilege.
sudo poweroff                           # This will shut down the system as the name suggest.
sudo halt                               # Halt is supposed to be same as poweroff by many beginners. But it’s not unless you explicitly mention to poweroff using either -p or–poweroff.So if you want to poweroff your system then use sudo halt –p or sudo halt –poweroff.
sudo reboot                             # This will simply reboot your system.
Ctrl + Alt + t                          # Open Ubuntu Terminal Window, the command line interface. This is a preinstalled software comes with every standard Ubuntu.
pwd                                     # print work directory: e.g. if you are at your home directory then it will print something like /home/<username>
ls                                      # list directory: This command will list the items of a directory. If you don’t specify a directory then it will list work directory, the place where you currently are.
cd                                      # change directory. It will change your work directly as you specify. You will have to specify a directory.g. cd /home will change your work directory to /home regardless where you are.
cd ..                                   # change directory one level up.
cd ~                                    # change to home directory. Suppose if your username is tom then cd ~ will change your work directory to /home/tom.
cp                                      # Copy Command. It will copy a file or directory. It is similar to Copy-Paste in GUI.
mv                                      # Move or rename files. It is like renaming a file or cut-paste in GUI.
rm                                      # remove file or directory.
rmdir                                   # remove empty directory. This will not remove content of the directory but it will delete a directory if it is empty.
mkdir                                   # make directory. It will create a new directory. We will need to specify a name.
man                                     # Ubuntu will help you instantly and has a built in manual. Simply apend any command with man or type executes man. e.g. man mkdir
sudo                                    # sudo basically allow a standard user to execute a command with root or superuser privilege.
adduser <username>                      # As the name suggest it will add another user. You may also use useradd, which is a little bit different from the adduser.
passwd <username>                       # This command will change password for an user named <username>. Root privilege will be require while change other user’s password.
time                                    # time command in Ubuntu will not actually show you current date or time. It will actually run and show the summary system resources usages.Tip: run time gedit in terminal. You will see a new gedit window. After a few seconds close the window and see what appears in the terminal. It will be something like:real     112s
user                                    0m0.560s
sys                                     0m0.050sCheck this wikipedia article.
date                                    # This command will show you the current date and time of your system (including timezone).
cal                                     # This will show calender in the terminal.
wget                                    # You can use wget command to download things from Internet or other connected networks.
ping                                    # You may ping websites and other devices with ping command. This is a part of iputils package. Pinging is something like saying hello to someone and that person reply you back. Which means you are connected and the remote person (or system) is replying you back. Try
ping -c 4 ubuntubeginner.com            # When you execute this command your system will say ubuntubeginner.com‘s server ‘hi’ 4 times. -c 4 stands for 4 times.
ftp                                     # ftp (file transfer protocol) is used to transfer files for one system to another system.
ssh                                     # ssh (secure shell) is used to log into remote system or server. By default Ubuntu comes with SSH program preinstalled.
fdisk                                   # fdisk command is used to manipulate (add, remove, delete, change) partition of your system. NOTE: Don’t use this command unless you are sure about the consequences.
df                                      # df is a very handy command which show the storage used/free on your the storage drives connected to your system.
chmod                                   # chmod is very useful command for beginners. It is used to change file permission. chmod stands for change mode in Linux.
chown                                   # chown is used to change owner of a file or directory (or further more). Beware about using chown or chmod commands
sudo su                                 # superuser in Ubuntu Desktop is disabled by default. But if you want to act as a superuser (or root) then use this command. You will be asked for password. sudo su will allow the terminal session to run all commands and activity with superuser privilege.Don’t forget to close the root session by using exit command.
                    WARNING: Acting as su or root could be dangerous. Beginners should consider using sudo.
clear                                   # Clear Screen: Use clear command to clear the terminal screen.
exit                                    # exit from terminal.
#####################################################################














































willbullen@enviroscan:/etc/nginx/sites-available$ sudo certbot --nginx -d enviroscan.io -d www.enviroscan.io
Saving debug log to /var/log/letsencrypt/letsencrypt.log
Plugins selected: Authenticator nginx, Installer nginx
/usr/local/lib/python3.8/dist-packages/cryptography/hazmat/backends/openssl/x509.py:15: CryptographyDeprecationWarning: This version of cryptography contains a temporary pyOpenSSL fallback path. Upgrade pyOpenSSL now.
  warnings.warn(
Obtaining a new certificate
Performing the following challenges:
http-01 challenge for enviroscan.io
Waiting for verification...
Cleaning up challenges
Deploying Certificate to VirtualHost /etc/nginx/sites-enabled/enviroscan.conf
Deploying Certificate to VirtualHost /etc/nginx/sites-enabled/enviroscan.conf

Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: No redirect - Make no further changes to the webserver configuration.
2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for
new sites, or if you're confident your site works on HTTPS. You can undo this
change by editing your web server's configuration.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate number [1-2] then [enter] (press 'c' to cancel): 2
Redirecting all traffic on port 80 to ssl in /etc/nginx/sites-enabled/enviroscan.conf
No matching insecure server blocks listening on port 80 found.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Congratulations! You have successfully enabled https://enviroscan.io and
https://www.enviroscan.io

You should test your configuration at:
https://www.ssllabs.com/ssltest/analyze.html?d=enviroscan.io
https://www.ssllabs.com/ssltest/analyze.html?d=www.enviroscan.io
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/enviroscan.io/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/enviroscan.io/privkey.pem
   Your cert will expire on 2022-09-23. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot again
   with the "certonly" option. To non-interactively renew *all* of
   your certificates, run "certbot renew"
 - If you like Certbot, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le




   Invalid user admin from 173.171.104.217 port 59068
Jun 26 21:30:04 enviroscan sshd[2849]: Failed none for invalid user admin from 173.171.104.217 port 59068 ssh2
Jun 26 21:30:04 enviroscan sshd[2849]: pam_unix(sshd:auth): check pass; user unknown
Jun 26 21:30:04 enviroscan sshd[2849]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=173.171.104.217
Jun 26 21:30:06 enviroscan sshd[2849]: Failed password for invalid user admin from 173.171.104.217 port 59068 ssh2
Jun 26 21:30:07 enviroscan sshd[2849]: pam_unix(sshd:auth): check pass; user unknown
Jun 26 21:30:09 enviroscan sshd[2849]: Failed password for invalid user admin from 173.171.104.217 port 59068 ssh2
Jun 26 21:30:11 enviroscan sshd[2849]: pam_unix(sshd:auth): check pass; user unknown
Jun 26 21:30:13 enviroscan sshd[2849]: Failed password for invalid user admin from 173.171.104.217 port 59068 ssh2
Jun 26 21:30:15 enviroscan sshd[2849]: pam_unix(sshd:auth): check pass; user unknown
Jun 26 21:30:18 enviroscan sshd[2849]: Failed password for invalid user admin from 173.171.104.217 port 59068 ssh2
Jun 26 21:30:19 enviroscan sshd[2849]: pam_unix(sshd:auth): check pass; user unknown
Jun 26 21:30:21 enviroscan sshd[2849]: Failed password for invalid user admin from 173.171.104.217 port 59068 ssh2
Jun 26 21:30:23 enviroscan sshd[2849]: error: maximum authentication attempts exceeded for invalid user admin from 173.171.104.217 port 59068 ssh2 [preauth]
Jun 26 21:30:23 enviroscan sshd[2849]: Disconnecting invalid user admin 173.171.104.217 port 59068: Too many authentication failures [preauth]
Jun 26 21:30:23 enviroscan sshd[2849]: PAM 4 more authentication failures; logname= uid=0 euid=0 tty=ssh ruser= rhost=173.171.104.217
Jun 26 21:30:23 enviroscan sshd[2849]: PAM service(sshd) ignoring max retries; 5 > 3
Jun 26 21:30:25 enviroscan sshd[2853]: Invalid user admin from 173.171.104.217 port 37333
Jun 26 21:30:25 enviroscan sshd[2853]: Failed none for invalid user admin from 173.171.104.217 port 37333 ssh2
Jun 26 21:30:25 enviroscan sshd[2853]: Connection closed by invalid user admin 173.171.104.217 port 37333 [preauth]
Jun 26 21:30:30 enviroscan gunicorn[1874]:  - - [26/Jun/2022:21:30:30 +0000] "GET /picarro/ HTTP/1.0" 200 1319 "-" "-"